#
# @lc app=leetcode id=22 lang=python3
#
# [22] Generate Parentheses
#
# https://leetcode.com/problems/generate-parentheses/description/
#
# algorithms
# Medium (56.62%)
# Total Accepted:    381.2K
# Total Submissions: 673K
# Testcase Example:  '3'
#
# 
# Given n pairs of parentheses, write a function to generate all combinations
# of well-formed parentheses.
# 
# 
# 
# For example, given n = 3, a solution set is:
# 
# 
# [
# ⁠ "((()))",
# ⁠ "(()())",
# ⁠ "(())()",
# ⁠ "()(())",
# ⁠ "()()()"
# ]
# 
#
class Solution:
    # def generateParenthesis(self, n: int) -> List[str]:
    def generateParenthesis(self, n):
        
        def join_from_left(p):
            return "()" + p
        
        def outer_join(p):
            return '(' + p + ')'

        def join_from_right(p):
            return p + "()"

        def update(p):
            res = []
            res.append(join_from_left(p))
            res.append(outer_join(p))    
            res.append(join_from_right(p))
            return res


        def process_count(l):
            n = len(l)
            res = []
            for i in range(n-1):
                for j in range(i+1, n):
                    s = outer_join("".join(l[i:j+1]))
                    res.append("".join(l[:i])+s+"".join(l[j+1:]))
            return res

        def process(p):
            # print(p)
            n = len(p)
            i = 0
            stack = []
            res = []
            count = []
            while i < n:
                if p[i] == '(':
                    if not stack:
                        start = i
                    stack.append(p[i])
                elif p[i]  == ')':
                    stack.pop()
                if not stack:
                    # print(start, i)
                    count.append(p[start:i+1])
                    for s in update(p[start:i+1]):
                        res.append(p[:start] + s + p[i+1:])
                i += 1
            if len(count) > 1:
                res.extend(process_count(count))
            return res

        def recur(n):
            if n == 1:
                return ['()']
            else:
                res = []
                for p in recur(n-1):
                    res.extend(process(p))
                return list(set(res))

        return recur(n)



# my =  ["(()()()()())","()()(()())()","((((()))))()","(()(())()())","()(())((()))","(()())((()))","()(()((())))","(()()())()()","(()()())(())","(())()((()))","(()()((())))","(()())()(())","(((()))())()","()((()(())))","(())()()()()","((((())())))","((()((()))))","(())()(())()","((()(()())))","()()(()()())","()()()()()()","(((()(()))))","(()()(()()))","(())((()))()","((()))(())()","((()))()()()","(((())))()()","(()(())(()))","(()(()))()()","((((()))()))","(())(()()())","()(()(()()))","(((())()()))","((()()()()))","(((()())()))","(())((())())","()()()(())()","()()(())()()","((())(())())","()((())()())","(()(()())())","()((((()))))","(()()()(()))","()()(()(()))","((()()))(())","(())()(()())","()(()()(()))","(()()()())()","((((()()))))","(())(()())()","(((())))(())","()((()))()()","()(()(())())","()((())(()))","(()(()()))()","()()((()))()","((())())()()","()(()())(())","(((()())))()","()(())(()())","(((()()))())","(((((())))))","()(((()))())","(())(())()()","(()((()))())","(()()(())())","()(())(())()","(()()(()))()","(((())())())","(()((()())))","((())()()())","(())(((())))","(()())(())()","((()))()(())","()(((()())))","((()(()))())","((((())))())","(()(()()()))","((()))((()))","((()()(())))","(())(())(())","()((())())()","()((()())())","((()()())())","()(()()())()","()(((())()))","(((()))()())","(())(()(()))","()((()()()))","((()()))()()","()()((())())","((())(()()))","()(()())()()","((())()())()","(())()()(())","()((()))(())","(()(()))(())","(((()))(()))","()()(((())))","((())()(()))","((()(())))()","()()()()(())","(())((()()))","()(()(()))()","(((()()())))","()(((())))()","()()()((()))","()((()()))()","(()())()()()","()(()()()())","(()((())))()","((())((())))","((()())())()","((()())(()))","((()(())()))","(()(())())()","()()((()()))","((())(()))()","(()(((()))))","(()(()(())))","(()((())()))","((()())()())","()()()(()())","((()))(()())","(((())()))()","(((())(())))","((())())(())","((()()()))()","()(())()(())","()()(())(())","()(())()()()"]
# exp = ["(((((())))))","((((()()))))","((((())())))","((((()))()))","((((())))())","((((()))))()","(((()(()))))","(((()()())))","(((()())()))","(((()()))())","(((()())))()","(((())(())))","(((())()()))","(((())())())","(((())()))()","(((()))(()))","(((()))()())","(((()))())()","(((())))(())","(((())))()()","((()((()))))","((()(()())))","((()(())()))","((()(()))())","((()(())))()","((()()(())))","((()()()()))","((()()())())","((()()()))()","((()())(()))","((()())()())","((()())())()","((()()))(())","((()()))()()","((())((())))","((())(()()))","((())(())())","((())(()))()","((())()(()))","((())()()())","((())()())()","((())())(())","((())())()()","((()))((()))","((()))(()())","((()))(())()","((()))()(())","((()))()()()","(()(((()))))","(()((()())))","(()((())()))","(()((()))())","(()((())))()","(()(()(())))","(()(()()()))","(()(()())())","(()(()()))()","(()(())(()))","(()(())()())","(()(())())()","(()(()))(())","(()(()))()()","(()()((())))","(()()(()()))","(()()(())())","(()()(()))()","(()()()(()))","(()()()()())","(()()()())()","(()()())(())","(()()())()()","(()())((()))","(()())(()())","(()())(())()","(()())()(())","(()())()()()","(())(((())))","(())((()()))","(())((())())","(())((()))()","(())(()(()))","(())(()()())","(())(()())()","(())(())(())","(())(())()()","(())()((()))","(())()(()())","(())()(())()","(())()()(())","(())()()()()","()((((()))))","()(((()())))","()(((())()))","()(((()))())","()(((())))()","()((()(())))","()((()()()))","()((()())())","()((()()))()","()((())(()))","()((())()())","()((())())()","()((()))(())","()((()))()()","()(()((())))","()(()(()()))","()(()(())())","()(()(()))()","()(()()(()))","()(()()()())","()(()()())()","()(()())(())","()(()())()()","()(())((()))","()(())(()())","()(())(())()","()(())()(())","()(())()()()","()()(((())))","()()((()()))","()()((())())","()()((()))()","()()(()(()))","()()(()()())","()()(()())()","()()(())(())","()()(())()()","()()()((()))","()()()(()())","()()()(())()","()()()()(())","()()()()()()"]




# s = Solution()
# print(s.generateParenthesis(2))
# print(s.generateParenthesis(3))
# print(set(s.generateParenthesis(6)) == set(exp))
# print(s.generateParenthesis(3))
# my = s.generateParenthesis(6)
# for s in my:
#     if s in exp:
#         exp.remove(s)
# print(exp)