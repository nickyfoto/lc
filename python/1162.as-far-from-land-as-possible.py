#
# @lc app=leetcode id=1162 lang=python3
#
# [1162] As Far from Land as Possible
#
# https://leetcode.com/problems/as-far-from-land-as-possible/description/
#
# algorithms
# Medium (39.57%)
# Total Accepted:    7.2K
# Total Submissions: 18.3K
# Testcase Example:  '[[1,0,1],[0,0,0],[1,0,1]]'
#
# Given an N x N grid containing only values 0 and 1, where 0 represents water
# and 1 represents land, find a water cell such that its distance to the
# nearest land cell is maximized and return the distance.
# 
# The distance used in this problem is the Manhattan distance: the distance
# between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
# 
# If no land or water exists in the grid, return -1.
# 
# 
# 
# Example 1:
# 
# 
# 
# 
# Input: [[1,0,1],[0,0,0],[1,0,1]]
# Output: 2
# Explanation: 
# The cell (1, 1) is as far as possible from all the land with distance 2.
# 
# 
# Example 2:
# 
# 
# 
# 
# Input: [[1,0,0],[0,0,0],[0,0,0]]
# Output: 4
# Explanation: 
# The cell (2, 2) is as far as possible from all the land with distance 4.
# 
# 
# 
# 
# Note:
# 
# 
# 1 <= grid.length == grid[0].length <= 100
# grid[i][j] is 0 or 1
# 
# 
#
from collections import defaultdict

class Solution:
    # def maxDistance(self, grid: List[List[int]]) -> int:
    def maxDistance2(self, grid) -> int:

        
        # print(grid)
        n_rows = len(grid)
        n_cols = len(grid[0])

        s = sum(map(sum, grid))
        # print('s= ', s)
        if not s:
            return -1
        if s == n_rows * n_cols:
            # print('here')
            return -1
        
        
        explored = defaultdict(lambda: False)
        dist = defaultdict(int)
        touch_land_d = defaultdict(lambda: False)
        

        class Node:
            def __init__(self, point):
                self.r, self.c = point
                self.point = point

            def bfs(self):
                def valid(point):
                    r, c = point
                    return n_rows > r >= 0 and n_cols > c >= 0 and not explored[point]
                def get_neighbors(point):
                    r, c  = point
                    up    = r - 1, c
                    down  = r + 1, c
                    left  = r, c - 1
                    right = r, c + 1
                    neighbors = filter(valid, [up, down, left, right])
                    touch_land = False
                    next_round = []
                    for neighbor in neighbors:
                        r, c = neighbor
                        if grid[r][c] == 1:
                            touch_land = True
                        else:
                            next_round.append(neighbor)
                    return next_round, touch_land
                
                q = [[self.point]]
                level = 0
                
                while q:
                    points = q.pop(0)
                    level += 1
                    next_rounds = []
                    for point in points:
                        next_round, touch_land = get_neighbors(point)
                        # print(tl)
                        if touch_land:
                            touch_land_d[point] = True
                            
                        dist[point] = level
                        explored[point] = True
                        next_rounds.extend(next_round)

                    # print('next_rounds:', next_rounds)
                    if next_rounds:
                        q.append(next_rounds)
                
        def valid(point):
            r, c = point
            return n_rows > r >= 0 and n_cols > c >= 0# and not explored[point]

        def touch_land(point):
            r, c = point
            up    = r - 1, c
            down  = r + 1, c
            left  = r, c - 1
            right = r, c + 1
            neighbors = filter(valid, [up, down, left, right])
            for neighbor in neighbors:
                r, c = neighbor
                if grid[r][c] == 1:
                    return True
            return False

        for r in range(n_rows):
            for c in range(n_cols):
                point = r, c
                if grid[r][c] == 0 and not explored[point]:
                    # if touch_land(point):
                    node = Node(point)
                    explored[point] = True
                    node.bfs()

        # print(explored)
        # print(dist)
        # return max( d for p,d in dist.items() if not touch_land_d[p]  )
        no_touch = (p for p,d in dist.items() if not touch_land_d[p])

        mn = 1

        for p in no_touch:
            d = [abs(point[0] - p[0]) + abs(point[1] - p[1]) for point in touch_land_d if touch_land_d[point]]
            # print(p, min(dist))
            mn = max(mn, min(d))


        return mn + 1

    def maxDistance(self, grid) -> int:

        
        # print(grid)
        n_rows = len(grid)
        n_cols = len(grid[0])

        s = sum(map(sum, grid))
        # print('s= ', s)
        if not s:
            return -1
        if s == n_rows * n_cols:
            # print('here')
            return -1
        
        
        explored = defaultdict(lambda: False)
        dist = defaultdict(int)
                
        def basic_valid(point):
            r, c = point
            return n_rows > r >= 0 and n_cols > c >= 0

        def touch_water(point):
            r, c = point
            up    = r - 1, c
            down  = r + 1, c
            left  = r, c - 1
            right = r, c + 1
            neighbors = filter(basic_valid, [up, down, left, right])
            for neighbor in neighbors:
                r, c = neighbor
                if grid[r][c] == 0:
                    return True
            return False


        land_edges = []

        for r in range(n_rows):
            for c in range(n_cols):
                point = r, c
                if grid[r][c] == 1 and not explored[point]:
                    if touch_water(point):
                        land_edges.append(point)

        # print(land_edges)

        def valid_water(point):
            r, c = point
            return n_rows > r >= 0 and n_cols > c >= 0 and not explored[point] and grid[r][c] == 0

        def get_neighbors(point):
            r, c  = point
            up    = r - 1, c
            down  = r + 1, c
            left  = r, c - 1
            right = r, c + 1
            neighbors = filter(valid_water, [up, down, left, right])
            water = []
            for neighbor in neighbors:
                explored[neighbor] = True
                water.append(neighbor)
            return water


        waters = []
        for point in land_edges:
            water = get_neighbors(point)
            waters.extend(water)

        q = [waters]

        level = 0
        while q:
            points = q.pop(0)
            level += 1
            waters = []
            for point in points:
                water = get_neighbors(point)
                dist[point] = level
                waters.extend(water)

            # print('waters:', waters)
            if waters:
                q.append(waters)

        return max(d for p,d in dist.items())



s = Solution()

import time

start = time.time()

grid = [[1,0,1],[0,0,0],[1,0,1]]
print(s.maxDistance(grid) == 2)


grid = [[1,0,0],[0,0,0],[0,0,0]]
# print(s.maxDistance(grid))
print(s.maxDistance(grid) == 4)



grid = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]
print(s.maxDistance(grid) == -1)


grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]]
print(s.maxDistance(grid) == -1)



grid = [[0,0,1,1,1],[0,1,1,0,0],[0,0,1,1,0],[1,0,0,0,0],[1,1,0,0,1]]
print(s.maxDistance(grid) == 2) #2


grid = [[1,0,0,0,0,1,0,0,0,1],[1,1,0,1,1,1,0,1,1,0],[0,1,1,0,1,0,0,1,0,0],[1,0,1,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,0,1,1],[0,0,1,0,0,1,0,1,0,1],[0,0,0,1,1,1,1,0,0,1],[0,1,0,0,1,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0],[1,1,0,1,1,1,1,1,0,0]]
print(s.maxDistance(grid) == 2) #2



grid = [[0,1,0,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,1,1,1,0,0,0,1,1,1,0,1,0,0,1,0,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,0,1,1,1,1,1,1,0,1,0,0,1,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0],[0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0],[1,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,0,0],[0,0,1,0,0,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1],[0,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1],[0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0],[1,0,0,1,1,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1,0],[1,0,0,1,0,0,1,0,1,0,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,1,1,0],[1,0,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,1,1,1,0,0,1],[0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,1,1,0,1,0,1,0,1,0],[0,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,0],[1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,1,1,0],[1,0,0,0,0,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1],[0,0,1,0,1,1,1,1,0,0,0,1,0,1,1,1,0,0,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,1,1,0,1,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,1,1],[1,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,0,1,0],[1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,0,1,0,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,1],[1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,0,1,1,0,0,0,1,1,1,1,1,1,0,1],[0,0,1,0,1,0,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,1,1,1,0,1,0,0,1,0,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0],[1,0,0,0,1,0,0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,1,1,1,0,1,0,0,1,1,0,1,0,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,0,1,0,0],[0,1,0,1,0,0,0,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,0,0,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,0,1,1,1,0,1],[0,1,1,1,0,0,1,1,0,0,0,1,1,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,0,0,1,1,0,1,1,1,0],[1,1,0,1,0,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,0,0],[1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,1],[1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0],[1,0,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,0,0],[1,0,1,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1],[1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,1,0],[1,0,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,0,1,1,0,1,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1],[0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,0,1,0,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,1,1,1,0,0],[1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0],[0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,1,0,1,0,0,0,0,1,0,1,0,0,0,0,0,1,1,1,0,1,1,0,1,0],[0,0,1,0,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,0,0,0],[1,0,0,1,1,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,0,1,1],[0,0,1,1,1,1,0,1,0,1,0,0,1,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,0,1,1],[1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,1,0,1],[0,1,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1],[0,0,0,0,0,0,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,1,1],[0,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0,0,1,0,0,1,1,0,1,0,0,0,1,1,0,0,1,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,0,0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0],[0,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,1,0,0,0],[1,0,1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,0,0,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,1],[0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,1,0],[0,0,1,0,0,1,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,1,0,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,1,0,1,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,0],[0,0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1],[0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,1,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,1],[1,0,1,1,1,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,1,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,0],[1,0,0,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,0,1],[0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0,0,1,0,1,0,0],[0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,0,0,1,1,0,0],[0,0,1,1,0,1,0,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,1,0,0,1,1,0,0,1,0,1,0,1],[0,0,1,0,1,0,0,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,1,1,0,1,0],[0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0],[1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,0,1,0,0,0,1,1,1,1,1,0,1,1,0,1,0,0,0,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,0,1,1,1,0,0,1,1,0,1,0,1,1,1,1,0,0,0,0,1,0,1,0],[1,0,1,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,0,1,1,0,0],[0,1,0,1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,0,0,0,1],[1,1,1,0,1,0,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,1,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1],[0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1],[0,1,0,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,0,0,1,0,1,0,1,1,0,1,0],[0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,0,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0],[1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,1,1,1],[1,1,0,1,0,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1],[0,0,1,0,0,1,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,1,0,1,0,1,1,1,1,0,1,1,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,0,1],[0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0],[1,0,1,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,0,0,1,1,1,1,0,0,1,1,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,1,0,1,0,1],[1,0,1,1,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,1,0,1,0,1,0,1,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,1,0,1,1],[0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,0,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,1,1,0,1,1,1,1],[0,1,1,0,1,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0,0,0,1,0,1,1,0,1,1,1,0],[1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1],[1,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,1,1,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0],[1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,0,1,1,1,1,1],[0,1,1,0,1,1,0,0,0,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,0],[0,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,1,0,0,1,0,1,0,0],[0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,0],[0,0,1,1,1,0,1,0,0,0,1,0,0,1,0,0,0,1,1,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,1],[1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,0,1,1,1,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,0,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,0,0,1],[1,0,0,0,1,0,1,1,1,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1],[1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,0,1,1,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0],[0,0,1,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,1,0,0,0,1],[1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,0,0,1,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,0,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1],[1,0,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,0,0,0,1,0,1,0,1,0,0,1,1,1,1,1,1,0,0,1,0,1],[1,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,1,0,1,1,1,0],[1,1,1,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0],[0,1,0,1,0,0,0,0,1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0],[1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,1,1,0,0,0,1,0,1,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1],[1,1,0,0,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,1,0,1,1,1,0,1,0,0,0,1,0,1,0,0],[1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1],[1,0,1,1,1,0,1,0,1,1,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,0,0,0,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,0,0],[1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,1,1,0,1,1,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,0,0,1,1,0,1,0,1,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,1,1,0,1,0,1,0,0],[1,0,0,1,0,1,1,0,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,1,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,1,1],[1,1,1,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0],[0,1,1,1,0,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1],[0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,1,1,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0],[1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1],[0,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,1,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,1,0,0,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,1],[1,0,1,0,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1,0,0],[1,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,0,0,1,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,0,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1],[1,1,0,1,1,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,1,0,1,0,0,0,1,1,0,1],[1,0,0,0,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,1,1,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0],[0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,0,1,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,1,1,1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,0,1],[1,0,1,1,0,0,0,1,1,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,0,1,0,0,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,0,1,1]]
print(s.maxDistance(grid)) #3

end = time.time()
print(end - start)