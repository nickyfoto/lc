#
# @lc app=leetcode id=1043 lang=python3
#
# [1043] Partition Array for Maximum Sum
#
# https://leetcode.com/problems/partition-array-for-maximum-sum/description/
#
# algorithms
# Medium (62.72%)
# Total Accepted:    7.8K
# Total Submissions: 12.4K
# Testcase Example:  '[1,15,7,9,2,5,10]\n3'
#
# Given an integer array A, you partition the array into (contiguous) subarrays
# of length at most K.  After partitioning, each subarray has their values
# changed to become the maximum value of that subarray.
# 
# Return the largest sum of the given array after partitioning.
# 
# 
# 
# Example 1:
# 
# 
# Input: A = [1,15,7,9,2,5,10], K = 3
# Output: 84
# Explanation: A becomes [15,15,15,9,10,10,10]
# 
# 
# 
# Note:
# 
# 
# 1 <= K <= A.length <= 500
# 0 <= A[i] <= 10^6
# 
# 
#
from functools import lru_cache
class Solution:
    # def maxSumAfterPartitioning(self, A: List[int], K: int) -> int:
    def maxSumAfterPartitioning2(self, A, K):

        n = len(A)

        # @lru_cache(maxsize=None)
        def recur(A):
            # print(A)
            if not A:
                return 0
            maximum = - float('inf')
            for k in range(1, K+1):
                s = len(A[:k])*max(A[:k]) + recur(A[k:])
                if s > maximum:
                    maximum = s
                # print(A, maximum)
            return maximum

        return recur(tuple(A))

    def maxSumAfterPartitioning(self, A, K):

        n = len(A)
        dp = [0] * (n+1)
        for i in range(n):
            curMax = 0
            for k in range(1, min(K, i+1) + 1):
                print('i=', i, 'k=', k, 'i-k+1=', i-k+1, 'A[i-k+1]=', A[i-k+1])
                curMax = max(curMax, A[i-k+1])
                print('update curMax to', curMax)
                print('i-k=', i-k)
                print('dp[i]=', dp[i], 'dp[i-k] + curMax * k = ', dp[i-k] + curMax*k)
                print('dp[i-k]=', dp[i-k], 'curMax*k=', curMax*k)
                print('max(dp[i], dp[i-k] + curMax*k)')
                print('max(dp[', i, '], dp[', i-k, '] + ', curMax, '*', k, ')')
                print('max(', dp[i], ',', dp[i-k], '+', curMax * k, ')')
                dp[i] = max(dp[i], dp[i-k] + curMax*k)
                print('dp=', dp)
                print('='*20)
        return dp[n-1]

s = Solution()
A = [1,15,7,9,2,5,10]
K = 3
print(s.maxSumAfterPartitioning(A, K))

A = [3,7]
K = 2
# print(s.maxSumAfterPartitioning(A, K))


# A = [20779,436849,274670,543359,569973,280711,252931,424084,361618,430777,136519,749292,933277,477067,502755,695743,413274,168693,368216,677201,198089,927218,633399,427645,317246,403380,908594,854847,157024,719715,336407,933488,599856,948361,765131,335089,522119,403981,866323,519161,109154,349141,764950,558613,692211]
# K = 26
# print(s.maxSumAfterPartitioning(A, K))


A = [201237,958849,247491,639390,712222,543937,617275,106260,249799,272665,274654,148479,760751,211526,56426,853785,284067,203606,769195,243497,250364,907593,246808,161796,384113,604492,273698,114348,530952,348543,700827,402418,310414,639075,330543,223477,618946,594479,786349,593141,147236,388695,550398,239962,161302,505625,456342,298733,612153,689952,551000,412964,725216,803514,740484,37869,311716,866934,281188,388781,569883,687476,463946,672911,854,327821,663151,278789,289343,118106,461445,745832,786919,993687,33994,262111,744895,724357,696142,822234,764784,997762,129814,268594,535022,515101,477159,412387,894945,224786,866586,748541,523095,630218,868188,517598,473743,907983,686167,535684,203308,804641,24154,892388,222681,217751,93037,385882,603588,169520,642535,303315,740453,464059,245349,206239,491673,281731,252214,865348,595414,396521,532465,701854,927997,921459,250559,876037,444029,774679,722716,618902,600481,663849,778753,771726,633569,57638,774506,304033,966017,738407,166700,667150,758754,889623,688073,709184,50986,864964,178992,834646,313826,147208,306645,447914,216026,969737,772375,431544,977172,885302,297678,351451,692862,840014,783024,103202,528643,81005,939524,725060,766036,768732,912503,294436,409636,614375,114558,134983,642223,117151,851090,709285,469717,532748,180052,612691,644757,138341,450043,646803,513509,737487,41828,788778,819179,125901,176124,25188,715635,342297,672377,177748,645272,555243,766371,547867,664176,726656,986169,846466,436450,153283,10804,353684,687936,832579,719149,793254,802080,25868,531016,503425,134515,884461,308821,710338,759717,805512,826834,515835,178300,962478,806969,454631,765263,175277,692670,502636,197363,545414,838682,129312,112662,625423,92934,619573,388189,596568,974994,359120,890956,448975,482060,242847,150474,789707,300513,259496,730347,542088,496204,945519,760268,918295,876073,801287,239999,865989,73627,406554,330478,746010,170004,551640,891740,766261,629213,186745,261977,424560,122084,323143,348042,987830,644718,471622,128561,331895,459075,783329,168588,421728,406516,847674,327804,264255,35399,504374,390575,671249,18216,180362,440826,235825,737029,164427,196399,138837,494926,517159,239745,113477,298381,719922,493561,637349,463264,371941,779732,237833,115860,521783,916090,779831,186617,662698,231245,732405,150874,342426,614658,246452,948560,217878,120209,755601,646300,895520,313648,267782,914872,659134,461880,291025,346506,775093,133474,365371,282623,623555,208784,250026,151864,268341,213101,90356,961186,816900,495549,594826,914696,725894,236021,291838,393947,933385,501313,240112,61161,592462,802289,915369,108618,402445,786020,791912,682590,809873,582534,151186,710866,967339,403717,966841,472370,74038,165552,723523,397400,56707,92544,387449,914095,93728,877784,114179,172965,929212,828681,529624,432296,543639,985407,78227,356795,702145,42541,411007,819256,326436,959075,231003,632156,434001,633362,847211,121729,953534,245616,865627,160105,982817,737821,139331,423843,741954,982263,628207,20618,446919,872387,988477,989942,37908,877485,974495,168081,713695,842576,417792,699834,30718,414067,36942,751179,663287,959201,671483,905995,75985,254696,972346,460980,254081,842918,618676,991740,168149,952050,536017,969034,518524,484435,503886,783775,840383,943333,631250,805048,865320,773277,630797,142925,486656,378225,83541,816581,98094,659378,292705,232245,451861,15328,537007,647226,738726,288064,227187,686392,803473,767156,296861,979335,202221,611407,11142,355006,178319]
K = 2
# print(s.maxSumAfterPartitioning(A, K))















        
